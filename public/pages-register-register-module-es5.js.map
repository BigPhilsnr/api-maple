{"version":3,"sources":["webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/register/register.component.scss","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts"],"names":["RegisterComponent","fb","router","snackBar","store","auth","hide","userTypes","id","name","genderTypes","registerForm","group","userType","required","username","compose","minLength","fullName","gender","dob","phone","email","password","confirmPassword","receiveNewsletter","validator","pipe","subscribe","user","checkUsers","saveUser","navigate","values","value","dispatch","open","panelClass","verticalPosition","duration","selector","template","routes","path","component","pathMatch","RegisterModule","declarations","imports","forChild","providers"],"mappings":"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","file":"pages-register-register-module-es5.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\n    <div class=\\\"theme-container\\\">\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\n            <mat-card [style.max-width.px]=\\\"500\\\">\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\n                    <h1 class=\\\"uppercase\\\">Register</h1>\\n                    <a mat-button routerLink=\\\"/login\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Already have an account? Sign in!</a>\\n                </div>\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\">\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">group</mat-icon>\\n                        <mat-label>User type</mat-label>\\n                        <mat-select placeholder=\\\"Select User Type\\\" formControlName=\\\"userType\\\">\\n                            <mat-option *ngFor=\\\"let type of userTypes\\\" [value]=\\\"type\\\">\\n                                {{type.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error *ngIf=\\\"registerForm.controls.userType.errors?.required\\\">User type is required\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\n                        <mat-label>FullName</mat-label>\\n                        <input matInput placeholder=\\\"FullName\\\" formControlName=\\\"fullName\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.errors?.required\\\">FullName is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.hasError('minlength')\\\">FullName isn't long\\n                            enough, minimum of 6 characters</mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">people</mat-icon>\\n                        <mat-label>Gender</mat-label>\\n                        <mat-select placeholder=\\\"Select Gender\\\" formControlName=\\\"gender\\\">\\n                            <mat-option *ngFor=\\\"let type of genderTypes\\\" [value]=\\\"type\\\">\\n                                {{type.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error *ngIf=\\\"registerForm.controls.userType.errors?.required\\\">Gender is required\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\n                        <mat-label>Email</mat-label>\\n                        <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">Email is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">Invalid email\\n                            address</mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\" >\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">phone</mat-icon>\\n                        <mat-label>Phone number</mat-label>\\n                        <input matInput placeholder=\\\"Phone number\\\" formControlName=\\\"phone\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.phone.errors?.required\\\">Phone is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.hasError('minlength')\\\">Phone isn't long\\n                            enough, minimum of 10 characters</mat-error>\\n                    </mat-form-field>\\n\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\n                        <mat-label>Password</mat-label>\\n                        <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\"\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">Password is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">Password isn't long\\n                            enough, minimum of 6 characters</mat-error>\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                        </button>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\n                        <mat-label>Confirm Password</mat-label>\\n                        <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\"\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">Confirm Password is\\n                            required</mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">\\n                            Passwords do not match</mat-error>\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                        </button>\\n                    </mat-form-field>\\n                    <mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">Receive Newsletter\\n                    </mat-slide-toggle>\\n                    <div class=\\\"text-center mt-2\\\">\\n                        <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\n                            Create an Account\\n                        </button>\\n                    </div>\\n                </form>\\n                <div class=\\\"divider mt-4\\\"></div>\\n                <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\n                    <small class=\\\"my-3\\\">By clicking the \\\"Create an Account\\\" button you agree with our <a mat-button\\n                            routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\" class=\\\"mx-2\\\">Terms and conditions</a>\\n                    </small>\\n                </mat-card-actions>\\n            </mat-card>\\n        </div>\\n\\n    </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\nimport { Store, select } from '@ngrx/store';\nimport { GlobalState } from 'src/app/store/states/global.state';\nimport { User } from './models/user';\nimport { UserInsertAction } from './store/user.actions';\nimport { selectAllUser, selectCurrentUser} from './store/user.selectors';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  public registerForm: FormGroup;\n  public hide = true;\n  public userTypes = [\n    { id: 1, name: 'Agent' },\n    { id: 2, name: 'Agency' },\n    { id: 3, name: 'Buyer' },\n    { id: 7, name: 'Seller' },\n    { id: 4, name: 'LandLord' },\n    { id: 5, name: 'CareTaker' },\n    { id: 6, name: 'Tenant' },\n  ];\n  public genderTypes = [\n    {id: 1, name: 'MALE'},\n    {id: 2, name: 'FEMALE'}\n  ];\n  constructor(public fb: FormBuilder, public router: Router, public snackBar: MatSnackBar, private store: Store<GlobalState> , private auth: AuthService) { }\n\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      userType: ['', Validators.required],\n      username: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      fullName: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      gender: ['', Validators.compose([Validators.required, Validators.minLength(3)])],\n      dob: ['', ],\n      phone: ['', Validators.compose([Validators.required, Validators.minLength(9)])],\n      email: ['', Validators.compose([Validators.required, emailValidator])],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      receiveNewsletter: false\n    }, {validator: matchingPasswords('password', 'confirmPassword')});\n\n    this.store.pipe(select(selectCurrentUser)).subscribe(user => this.checkUsers(user) );\n  }\n\n  private checkUsers(user: User){\n    if (user){\n        this.auth.saveUser(user, null);\n        this.router.navigate(['/account/my-properties']);\n    }\n  }\n\n  public onRegisterFormSubmit(values: Object): void {\n    if (true) {\n      const user: User = this.registerForm.value as User;\n      this.store.dispatch(new UserInsertAction(user));\n      this.snackBar.open('Registering user', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RegisterComponent } from './register.component';\nimport {UserService} from './services/user.service';\n\nexport const routes = [\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\n];\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  providers: [UserService]\n\n})\nexport class RegisterModule { }\n"]}