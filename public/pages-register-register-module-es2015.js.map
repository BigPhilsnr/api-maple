{"version":3,"sources":["./src/app/pages/register/register.component.html","./src/app/pages/register/register.component.scss","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.module.ts"],"names":[],"mappings":"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","file":"pages-register-register-module-es2015.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\n    <div class=\\\"theme-container\\\">\\n\\n        <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\n            <mat-card [style.max-width.px]=\\\"500\\\">\\n                <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\n                    <h1 class=\\\"uppercase\\\">Register</h1>\\n                    <a mat-button routerLink=\\\"/login\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Already have an account? Sign in!</a>\\n                </div>\\n                <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\">\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">group</mat-icon>\\n                        <mat-label>User type</mat-label>\\n                        <mat-select placeholder=\\\"Select User Type\\\" formControlName=\\\"userType\\\">\\n                            <mat-option *ngFor=\\\"let type of userTypes\\\" [value]=\\\"type\\\">\\n                                {{type.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error *ngIf=\\\"registerForm.controls.userType.errors?.required\\\">User type is required\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\n                        <mat-label>FullName</mat-label>\\n                        <input matInput placeholder=\\\"FullName\\\" formControlName=\\\"fullName\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.errors?.required\\\">FullName is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.hasError('minlength')\\\">FullName isn't long\\n                            enough, minimum of 6 characters</mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">people</mat-icon>\\n                        <mat-label>Gender</mat-label>\\n                        <mat-select placeholder=\\\"Select Gender\\\" formControlName=\\\"gender\\\">\\n                            <mat-option *ngFor=\\\"let type of genderTypes\\\" [value]=\\\"type\\\">\\n                                {{type.name}}\\n                            </mat-option>\\n                        </mat-select>\\n                        <mat-error *ngIf=\\\"registerForm.controls.userType.errors?.required\\\">Gender is required\\n                        </mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\n                        <mat-label>Email</mat-label>\\n                        <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">Email is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">Invalid email\\n                            address</mat-error>\\n                    </mat-form-field>\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\" >\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">phone</mat-icon>\\n                        <mat-label>Phone number</mat-label>\\n                        <input matInput placeholder=\\\"Phone number\\\" formControlName=\\\"phone\\\" required>\\n                        <mat-error *ngIf=\\\"registerForm.controls.phone.errors?.required\\\">Phone is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.fullName.hasError('minlength')\\\">Phone isn't long\\n                            enough, minimum of 10 characters</mat-error>\\n                    </mat-form-field>\\n\\n\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\n                        <mat-label>Password</mat-label>\\n                        <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\"\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">Password is required\\n                        </mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">Password isn't long\\n                            enough, minimum of 6 characters</mat-error>\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                        </button>\\n                    </mat-form-field>\\n                    <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\n                        <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\n                        <mat-label>Confirm Password</mat-label>\\n                        <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\"\\n                            required [type]=\\\"hide ? 'password' : 'text'\\\">\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">Confirm Password is\\n                            required</mat-error>\\n                        <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">\\n                            Passwords do not match</mat-error>\\n                        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n                        </button>\\n                    </mat-form-field>\\n                    <mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">Receive Newsletter\\n                    </mat-slide-toggle>\\n                    <div class=\\\"text-center mt-2\\\">\\n                        <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\n                            Create an Account\\n                        </button>\\n                    </div>\\n                </form>\\n                <div class=\\\"divider mt-4\\\"></div>\\n                <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\n                    <small class=\\\"my-3\\\">By clicking the \\\"Create an Account\\\" button you agree with our <a mat-button\\n                            routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\" class=\\\"mx-2\\\">Terms and conditions</a>\\n                    </small>\\n                </mat-card-actions>\\n            </mat-card>\\n        </div>\\n\\n    </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\nimport { Store, select } from '@ngrx/store';\nimport { GlobalState } from 'src/app/store/states/global.state';\nimport { User } from './models/user';\nimport { UserInsertAction } from './store/user.actions';\nimport { selectAllUser, selectCurrentUser} from './store/user.selectors';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  public registerForm: FormGroup;\n  public hide = true;\n  public userTypes = [\n    { id: 1, name: 'Agent' },\n    { id: 2, name: 'Agency' },\n    { id: 3, name: 'Buyer' },\n    { id: 7, name: 'Seller' },\n    { id: 4, name: 'LandLord' },\n    { id: 5, name: 'CareTaker' },\n    { id: 6, name: 'Tenant' },\n  ];\n  public genderTypes = [\n    {id: 1, name: 'MALE'},\n    {id: 2, name: 'FEMALE'}\n  ];\n  constructor(public fb: FormBuilder, public router: Router, public snackBar: MatSnackBar, private store: Store<GlobalState> , private auth: AuthService) { }\n\n  ngOnInit() {\n    this.registerForm = this.fb.group({\n      userType: ['', Validators.required],\n      username: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      fullName: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\n      gender: ['', Validators.compose([Validators.required, Validators.minLength(3)])],\n      dob: ['', ],\n      phone: ['', Validators.compose([Validators.required, Validators.minLength(9)])],\n      email: ['', Validators.compose([Validators.required, emailValidator])],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required],\n      receiveNewsletter: false\n    }, {validator: matchingPasswords('password', 'confirmPassword')});\n\n    this.store.pipe(select(selectCurrentUser)).subscribe(user => this.checkUsers(user) );\n  }\n\n  private checkUsers(user: User){\n    if (user){\n        this.auth.saveUser(user, null);\n        this.router.navigate(['/account/my-properties']);\n    }\n  }\n\n  public onRegisterFormSubmit(values: Object): void {\n    if (true) {\n      const user: User = this.registerForm.value as User;\n      this.store.dispatch(new UserInsertAction(user));\n      this.snackBar.open('Registering user', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SharedModule } from '../../shared/shared.module';\nimport { RegisterComponent } from './register.component';\nimport {UserService} from './services/user.service';\n\nexport const routes = [\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\n];\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RouterModule.forChild(routes),\n    SharedModule\n  ],\n  providers: [UserService]\n\n})\nexport class RegisterModule { }\n"],"sourceRoot":"webpack:///"}